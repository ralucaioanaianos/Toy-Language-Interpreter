Program state
ID: 1 
Exe Stack: {(int v1;(v1=2;(int v2;(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)})))) | } 
Sym Table:  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(v1=2;(int v2;(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)}))) | int v1 | } 
Sym Table:  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(v1=2;(int v2;(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)}))) | int v1 | } 
Sym Table:  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(v1=2;(int v2;(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)}))) | } 
Sym Table: v1->0,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(v1=2;(int v2;(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)}))) | } 
Sym Table: v1->0,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(int v2;(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)})) | v1=2 | } 
Sym Table: v1->0,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(int v2;(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)})) | v1=2 | } 
Sym Table: v1->0,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(int v2;(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)})) | } 
Sym Table: v1->2,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(int v2;(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)})) | } 
Sym Table: v1->2,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)}) | int v2 | } 
Sym Table: v1->2,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)}) | int v2 | } 
Sym Table: v1->2,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)}) | } 
Sym Table: v1->2, v2->0,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {(v2=3;if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)}) | } 
Sym Table: v1->2, v2->0,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)} | v2=3 | } 
Sym Table: v1->2, v2->0,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)} | v2=3 | } 
Sym Table: v1->2, v2->0,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)} | } 
Sym Table: v1->2, v2->3,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {if (v1>0) then {print((v1 * v2) - (v1 + v2))} else {print(v1)} | } 
Sym Table: v1->2, v2->3,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {print((v1 * v2) - (v1 + v2)) | } 
Sym Table: v1->2, v2->3,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {print((v1 * v2) - (v1 + v2)) | } 
Sym Table: v1->2, v2->3,  
Heap:  
Output Console:  
File Table:  
 


Program state
ID: 1 
Exe Stack: {} 
Sym Table: v1->2, v2->3,  
Heap:  
Output Console: 1  
File Table:  
 


